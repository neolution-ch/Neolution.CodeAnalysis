# Top level entry required to mark this as a global AnalyzerConfig file
# NOTE: Do not create section headers for configuration entries
is_global = true

#### Undesired rules ####

# Literals should not be passed as localized parameters
; Localization is not needed in every project and for every message. This rule disallows string literals everywhere e.g. for log messages, content that does not need to be translated etc.
dotnet_diagnostic.S4055.severity = none
dotnet_diagnostic.CA1303.severity = silent

# Each source file should start with a header stating file ownership and the license which must be used to distribute the application
; Header is not needed for each file. If the source code of a project will be distributed, the text can be added to each file individually at a later point in time to satisfy this rule.
dotnet_diagnostic.S1451.severity = none
dotnet_diagnostic.SA1633.severity = none

# A field name in C# does not begin with an underscore.
; Field names must not begin with an underscore. The `this.` qualifier is used in favor of the underscore
dotnet_diagnostic.SX1309.severity = none
dotnet_diagnostic.SX1309S.severity = none

# Do not prefix local calls with `this.`.
; Always prefix local calls with "this.". The "this." qualifier is used in favor of the underscore.
dotnet_diagnostic.SX1101.severity = none
dotnet_diagnostic.IDE0003.severity = none

# Use explicit type
; Do not force explicit type usage. Prefer using the implicit type (var) but you can use the explicit type to improve reading flow and comprehension.
dotnet_diagnostic.IDE0008.severity = silent

# Track uses of in-source issue suppressions
; Suppressions should be allowed, but still tracked.
dotnet_diagnostic.S1309.severity = silent

# Mark assemblies with CLSCompliant
; It is not needed to mark assemblies with CLSCompliant. We actively use libraries that are not compliant. If we mark our assemblies as CLS compliant we cannot use these anymore.
dotnet_diagnostic.CA1014.severity = none
dotnet_diagnostic.S3992.severity = none
dotnet_diagnostic.S3990.severity = none

# "Exception" should not be caught when not required by called methods
; This rule probably originates from Java where the Exception that will be thrown can be declared in the source code which is then checked by the compiler.
dotnet_diagnostic.S2221.severity = none
dotnet_diagnostic.CA1031.severity = none

# Use properties where appropriate
; Developers can make a correct decision when the property is a better option than a method.
dotnet_diagnostic.CA1024.severity = none

# URI properties or parameters should not be strings
; The team decided to drop this rule due to inconveniences resulting from System.Uri not having a parameterless constructor.
dotnet_diagnostic.CA1054.severity = none
dotnet_diagnostic.CA1056.severity = none
dotnet_diagnostic.S3996.severity = silent
dotnet_diagnostic.S3994.severity = silent

# Pass System.Uri objects instead of strings
; Dropped in favor of S4005
dotnet_diagnostic.CA2234.severity = none

# Redundant parentheses should not be used
; The team decided to drop this rule because most of the team members are used to write redundant parentheses.
dotnet_diagnostic.S3235.severity = silent

# Collection properties should be read only
; The team decided to drop this rule due to the additional effort that is needed to write methods that add items for these type of properties.
dotnet_diagnostic.CA2227.severity = none
dotnet_diagnostic.S4004.severity = silent

# Convert to conditional expression
; Conflicts with rule S3358.
dotnet_diagnostic.IDE0045.severity = none
dotnet_diagnostic.IDE0046.severity = none

# Avoid excessive class coupling
; Even if this rule might sound useful, in practice it was generating too many false-positives. Also, EF LINQ Queries are very prone to this and unit and integration tests have to setup and configure numerous dependencies in the same class.
dotnet_diagnostic.CA1506.severity = none

# Generic methods should provide type parameters
; Using the generic argument as return type does not lead to bugs. Only when calling the method, you need to write a little more explicit code.
dotnet_diagnostic.S4018.severity = none

# Mark members as static
; Dropped in favor of S2325.
dotnet_diagnostic.CA1822.severity = none

# PropertyDocumentationMustHaveValue
; The documentation of the property value is doomed to become a hollow echo of the name and the summary.
dotnet_diagnostic.SA1609.severity = none

# DoNotCombineAttributes
; The team voted to deactivate this rule on 28.02.2019.
dotnet_diagnostic.SA1133.severity = none

# Normalize strings to uppercase
; Too many false positives for paths, URLs etc.
dotnet_diagnostic.CA1308.severity = none
dotnet_diagnostic.S4040.severity = silent

# Track uses of "TODO" tags
; Still show it to the developer in his IDE.
dotnet_diagnostic.S1135.severity = suggestion

# Missing XML comment for publicly visible type or member 'Type_or_Member'
; Dropped in favor of SA1600.
dotnet_diagnostic.CS1591.severity = none

# C# Expression value is never used
; Is reporting way too many false negatives.
dotnet_diagnostic.IDE0058.severity = none

# Methods and properties should not be too complex
; Deactivated in favor of the more elaborate rule S3776 (Cognitive Complexity of methods should not be too high).
dotnet_diagnostic.S1541.severity = none
dotnet_diagnostic.CA1502.severity = none

# Documentation text should end with a period
; Does not add too much quality and developers find it too annoying to comply with this.
dotnet_diagnostic.SA1629.severity = silent

# Misplaced using directive
; Placing using directives outside of the namespace conflicts with our code style.
dotnet_diagnostic.IDE0065.severity = none

# Types that own disposable fields should be disposable
; Dropped in favor of S2931.
dotnet_diagnostic.CA1001.severity = none

# Overloads with a "StringComparison" parameter should be used.
; Generated too many false positives for EF queries.
dotnet_diagnostic.CA1307.severity = none
dotnet_diagnostic.S4058.severity = silent

# Do not raise reserved exception types
; Dropped in favor of S112
dotnet_diagnostic.CA2201.severity = none

# Name can be simplified
; Can lead to conflicting scenarios in the using directives with SA1135.
dotnet_diagnostic.IDE0001.severity = none

# Lines should not be too long
; Developers should be in charge to decide when the line is too long. Horizontal scrolling is not a big issue anymore with todays display sizes and resolutions.
dotnet_diagnostic.S103.severity = silent

# Magic numbers should not be used
; Developers are advised to add a comment to demystify the meaning of such a number.
dotnet_diagnostic.S109.severity = suggestion

# Console logging should not be used
; This rule has been superseded by S106 (https://jira.sonarsource.com/browse/RSPEC-2228).
dotnet_diagnostic.S2228.severity = none

# Single line comments should begin with single space
; Dropped in favor of S125.
dotnet_diagnostic.SA1005.severity = none

# Unnecessary using directive
; Dropped in favor of S1128.
dotnet_diagnostic.CS8019.severity = none
dotnet_diagnostic.IDE0005.severity = none

# Validate arguments of public methods
; Dropped in favor of S3900.
dotnet_diagnostic.CA1062.severity = none

# Specify IFormatProvider
; Dropped in favor of S4056.
dotnet_diagnostic.CA1305.severity = none

# Unread "private" fields should be removed
; Dropped in favor of S4487
dotnet_diagnostic.IDE0052.severity = none

# "switch" statements should have at least 3 "case" clauses
; Removed based on team vote. They prefer switch even if it has only one `case` clause.
dotnet_diagnostic.S1301.severity = silent

# break statements should not be used except for switch cases
; We enforce multiple rules to force developers to write simple functions. In simple functions, break statements should not be too problematic concerning readability.
dotnet_diagnostic.S1227.severity = silent

# URIs should not be hardcoded
; The suggestion is helpful, but should not be enforced in all cases.
dotnet_diagnostic.S1075.severity = suggestion

# Rethrow to preserve stack details
; Dropped in favor of S3445.
dotnet_diagnostic.CA2200.severity = none

# Do not expose generic lists
; Dropped in favor of S3956.
dotnet_diagnostic.CA1002.severity = none

# Use the LoggerMessage delegates
; Not all logging needs to be high performance.
dotnet_diagnostic.CA1848.severity = silent

# Fix formatting
; Conflicts with several StyleCop spacing rules.
dotnet_diagnostic.IDE0055.severity = none

# SQL keywords should be delimited by whitespace
; Has a confirmed FP that makes it unusable when using nameof(): https://github.com/SonarSource/sonar-dotnet/issues/6126
dotnet_diagnostic.S2857.severity = none

#### Desired rules ####

# S107: Methods should not have too many parameters
dotnet_diagnostic.S107.severity = warning

# S134: Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply
dotnet_diagnostic.S134.severity = warning

# S138: Functions should not have too many lines of code
dotnet_diagnostic.S138.severity = warning

# S1067: Expressions should not be too complex
dotnet_diagnostic.S1067.severity = warning

# S1151: "switch case" clauses should not have too many lines of code
dotnet_diagnostic.S1151.severity = warning

# S1200: Classes should not be coupled to too many other classes (Single Responsibility Principle)
dotnet_diagnostic.S1200.severity = warning

# S1244: Floating point numbers should not be tested for equality
dotnet_diagnostic.S1244.severity = warning

# S2360: Optional parameters should not be used
dotnet_diagnostic.S2360.severity = warning

# S3876: Strings or integral types should be used for indexers
dotnet_diagnostic.S3876.severity = warning

# S4017: Method signatures should not contain nested generic types
dotnet_diagnostic.S4017.severity = warning

# S4049: Properties should be preferred
dotnet_diagnostic.S4049.severity = warning

# CA5386: Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = warning

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = warning

# SA1200: Using directives should be placed correctly
dotnet_diagnostic.SA1200.severity = warning

# CA5351: Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = warning
